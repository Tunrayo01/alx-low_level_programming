!<arch>
0-isupper.c/    0           0     0     644     258       `
#include "main.h"

/**
 *_isupper - function that checks for uppercase
 * @c: the character to be checked
 *
 * Return: returns 1 for upper and 0 for lower
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
0-memset.c/     0           0     0     644     315       `
#include "main.h"
#include <string.h>

/**
**_memset - function that fills memory with a constant byte
* @s: pointer
* @b: character to be used
* @n: number of character
* Return: pointer
*/

char *_memset(char *s, char b, unsigned int n)
{
	int x;

	for (x = 0; n > 0; x++)
	{
		s[x] = b;
		n--;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     354       `
#include "main.h"

/**
 * _strcat - function that concatenate two strings
 *@dest: destination string
 *@src: source string
 *Return: dest
 */

char *_strcat(char *dest, char *src)
{
	int x;
	int y;

	x = 0;
	y = 0;

	while (dest[x] != '\0')
	{
		x++;
	}
	while (src[y] != '\0')
	{
		dest[x] = src[y];
		x++;
		y++;
	}
	dest[x] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     589       `
#include "main.h"
#include <limits.h>

/**
 * _atoi - function that convert a string to an integer
 * @s: string to be used
 * Return: integer
 */

int _atoi(char *s)
{
	int sign, to, i;

	sign = 1;
	to = 0;
	i = 0;

	while (s[i] != '\0')
	{
		if (s[i] == '-')
			sign *= -1;
		else if (s[i] >= '0' && s[i] <= '9')
		{
			if (to > INT_MAX / 10 || (to == INT_MAX / 10 && s[i] - '0' > INT_MAX % 10))
			{
				if (sign == 1)
					return (INT_MAX);
				else
					return (INT_MIN);
			}
			to = to * 10 + (s[i] - '0');
		}
		else if (to != 0)
		{
		break;
		}

		i++;
	}
	return (to * sign);
}

1-isdigit.c/    0           0     0     644     242       `
#include "main.h"

/**
 * _isdigit - function that checks digit
 *
 * @c: digit to be tested
 *
 * Return: return 0 for digit and 1 otherwise
 */

int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
1-memcpy.c/     0           0     0     644     332       `
#include "main.h"
#include <string.h>

/**
* _memcpy - function that copies memory area
* @dest: destination pointer
* @src: pointer to be copied
* @n: copied time
* Return: destination
*/

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int k;

	for (k = 0; k < n; k++)
	{
		dest[k] = src[k];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     458       `
#include "main.h"

/**
 * _strncat - unction that concatenates two strings which,
 * it will use at most n bytes from src
 * @dest: destination of string
 * @src: string source
 * @n: parameter to be used
 * Return: destination string
 */

char *_strncat(char *dest, char *src, int n)
{
	int x = 0;
	int y = 0;

	while (dest[x] != '\0')
	{
		x++;
	}
	while (y < n && src[x] != '\0')
	{
		dest[x] = src[y];
		y++;
		x++;
	}
	dest[x] = '\0';
	return (dest);
}
2-strchr.c/     0           0     0     644     329       `
#include "main.h"

/**
* _strchr - function that locates a character in a string
*@s: string pointer
*@c: character to be used
* Return: first occurrence pointer ,else 0
*/

char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
		{
			return (s);
		}
		s++;
	}
	if (c == '\0')
	{
		return (s);
	}
	return (0);
}

2-strlen.c/     0           0     0     644     245       `
#include "main.h"

/**
 * _strlen - function that return lenght of string
 * @s: string to be used
 * Return: string lenght
 */

int _strlen(char *s)
{
	int i;
	int counter = 0;

	for (i = 0; s[i] != '\0'; i++)
		counter++;
	return (counter);
}

2-strncpy.c/    0           0     0     644     367       `
#include "main.h"

/**
 * _strncpy - function that copies a string
 * @dest: string destination
 * @src: string source
 * @n: parameter input
 * Return: destination string
 */

char *_strncpy(char *dest, char *src, int n)
{
	int j = 0;

	while (j < n && src[j] != '\0')
	{
		dest[j] = src[j];
		j++;
	}
	while (j < n)
	{
		dest[j] = '\0';
		j++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     238       `
#include "main.h"

/**
 * _islower - checks for lowercase alphabets
 *
 *@ch: character to be tested
 *
 * Return: 1 for lowercase and 0 for others
 */

int _islower(int ch)
{
	if (ch >= 97 && ch <= 122)
	{
	return (1);
	}
	return (0);
}
3-puts.c/       0           0     0     644     219       `
#include "main.h"

/**
 * _puts - print string followed by new line
 * @str: printed string
 * Return: void
 */

void _puts(char *str)
{
	int j;

	for (j = 0; str[j] != '\0'; j++)
		_putchar(str[j]);
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     302       `
#include "main.h"

/**
 * _strcmp - function that compares two strings
 * @s1: string 1
 * @s2: string 2
 * Return: always 0
 */

int _strcmp(char *s1, char *s2)
{
	int x = 0;

	while (s1[x] != '\0' && s2[x] != '\0')
	{
		if (s1[x] != s2[x])
		{
			return (s1[x] - s2[x]);
		}
		x++;
	}
	return (0);
}
3-strspn.c/     0           0     0     644     426       `
#include "main.h"

/**
* _strspn - function that gets the length of a prefix substring
* @s: string
* @accept: string with characters to match
* Return: number of bytes
*/

unsigned int _strspn(char *s, char *accept)
{
	unsigned int len = 0;
	int i, j;

	for (i = 0; s[i]; i++)
	{
		for (j = 0; accept[j]; j++)
		{
			if (s[i] == accept[j])
			{
				len++;
				break;
			}
		}
		if (!accept[j])
			break;
	}

	return (len);
}
4-isalpha.c/    0           0     0     644     280       `
#include "main.h"

/**
 * _isalpha - checks for alphabetic character
 *
 * @c: the character to be checked
 *
 * Return: 1 for alphabetic character or 0 for anything else
 */

int _isalpha(int c)
{

if ((c >= 65 && c <= 97) || (c >= 97 && c <= 122))
{
return (1);
}
return (0);
}
4-strpbrk.c/    0           0     0     644     383       `
#include "main.h"

/**
* _strpbrk - function that searches a string for any of a set of bytes
* @s: string
* @accept: the string containing bytes to search for.
* Return: a pointer to the byte
*/
char *_strpbrk(char *s, char *accept)
{
	int x;
	int y;

	for (x = 0; s[x]; x++)
	{
		for (y = 0; accept[y]; y++)
		{
			if (s[x] == accept[y])
				return (&s[x]);
		}
	}

	return (0);
}

5-strstr.c/     0           0     0     644     470       `
#include "main.h"

/**
* _strstr - function that locates a substring
* @haystack: string
* @needle: substring to find
* Return: pointer to the beginning of the found substring, else 0
*/

char *_strstr(char *haystack, char *needle)
{
	int x;
	int y;

	if (!*needle)
		return (haystack);

	for (x = 0; haystack[x]; x++)
	{
		for (y = 0; needle[y]; y++)
		{
			if (haystack[x + y] != needle[y])
				break;
		}
		if (!needle[y])
			return (&haystack[x]);
	}
	return (0);
}
6-abs.c/        0           0     0     644     265       `
#include "main.h"

/**
 * _abs - calculates absolute value for integer
 *
 * @c: the number to be tested
 *
 * Return: absolute value of integer or 0
 */

int _abs(int c)
{
	if (c < 0)
	{
	int abs_value;

	abs_value = c * -1;
	return (abs_value);
	}
	return (c);
}

9-strcpy.c/     0           0     0     644     317       `
#include "main.h"

/**
 * _strcpy - function that copies the string pointed to by src
 * @dest: destination of string
 * @src: source of string
 * Return: pointer destination
 */

char *_strcpy(char *dest, char *src)
{
	int j;

	for (j = 0; src[j] != '\0'; j++)
		dest[j] = src[j];
	dest[j] = '\0';
	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

